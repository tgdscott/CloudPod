from fastapi import APIRouter, Header, HTTPException, Request
from pydantic import BaseModel
import os, logging
from api.services.transcription import transcribe_media_file

router = APIRouter(prefix="/api/tasks", tags=["tasks"])

class TranscribeIn(BaseModel):
    filename: str

@router.post("/transcribe")
async def transcribe(req: Request, payload: TranscribeIn, x_tasks_auth: str | None = Header(None)):
    if x_tasks_auth != os.getenv("TASKS_AUTH"):
        raise HTTPException(401, "unauthorized")
    logging.info(
        "event=tasks.transcribe.start filename=%s request_id=%s",
        payload.filename, req.headers.get("x-request-id")
    )
    transcribe_media_file(payload.filename)
    logging.info(
        "event=tasks.transcribe.done filename=%s request_id=%s",
        payload.filename, req.headers.get("x-request-id")
    )
    return {"queued": False, "started": True}
