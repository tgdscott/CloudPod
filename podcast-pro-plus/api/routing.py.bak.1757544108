from __future__ import annotations
try:
    from api.routers.wizard import router as wizard_router
except Exception:
    wizard_router = None
from api.routers.tasks import router as tasks_router


def attach_routers(app) -> None:
    """
    Attach all routers to the FastAPI app.

    Imports are local to avoid circular imports at module import time.
    """
    # Aliases & health/auth-me
    from api.routers.media.upload_alias import router as media_upload_alias_router
    from api.routers.episodes_publish_alias import router as episodes_publish_alias_router
    from api.routers.health import router as health_router
    from api.routers.auth_me import router as auth_me_router

    app.include_router(media_upload_alias_router)
    app.include_router(episodes_publish_alias_router)
    app.include_router(health_router)
    app.include_router(auth_me_router)

    # Grouped under /api
    from api.routers import (
        episodes,
        spreaker,
        templates,
        media,
        users,
        admin,
        podcasts,
        importer,
        auth,
        public,
        debug,
        spreaker_oauth,
        flubber,
        ai_suggestions,
        ai_metadata,
        recurring,
        sections as sections_router,
    )
    from api.routers import waitlist as waitlist_router
    from api.routers import music as music_router
    from api.routers import billing as billing_router
    from api.routers import billing_webhook as billing_webhook_router
    from api.routers import notifications as notifications_router
    from api.routers import elevenlabs as elevenlabs_router
    from api.routers import media_tts as media_tts_router
    from api.routers import gcs_uploads as gcs_uploads_router
    from api.routers import dashboard as dashboard_router
    from api.routers import tasks as tasks_router

    app.include_router(recurring.router, prefix="/api")
    app.include_router(auth.router, prefix="/api")
    app.include_router(episodes.router, prefix="/api")
    app.include_router(spreaker.router, prefix="/api")
    app.include_router(spreaker_oauth.router, prefix="/api")
    app.include_router(templates.router, prefix="/api")
    app.include_router(media.router, prefix="/api")
    app.include_router(flubber.router, prefix="/api")
    app.include_router(users.router, prefix="/api")
    app.include_router(admin.router, prefix="/api")
    app.include_router(podcasts.router, prefix="/api")
    app.include_router(importer.router, prefix="/api")
    app.include_router(wizard.router, prefix="/api") if "wizard" in dir() else None  # defensive if renamed
    app.include_router(public.router, prefix="/api")
    app.include_router(waitlist_router.router, prefix="/api")
    app.include_router(debug.router, prefix="/api")
    app.include_router(music_router.router, prefix="/api")
    app.include_router(billing_router.router, prefix="/api")
    app.include_router(billing_webhook_router.router, prefix="/api")
    app.include_router(notifications_router.router, prefix="/api")
    app.include_router(ai_metadata.router, prefix="/api")
    app.include_router(sections_router.router, prefix="/api")
    app.include_router(ai_suggestions.router, prefix="/api")
    app.include_router(elevenlabs_router.router, prefix="/api")
    app.include_router(media_tts_router.router, prefix="/api")
    app.include_router(gcs_uploads_router.router, prefix="/api")
    app.include_router(dashboard_router.router, prefix="/api")

def attach_routers(app):
    if wizard_router:
    # Optional wizard router (present in some branches)
    try:
        from api.routers import wizard as wizard_router
    except Exception:
        pass
    # Optional wizard router (present in some branches)
    try:
        from api.routers import wizard as wizard_router
    except Exception:
        pass
    # Optional wizard router (present in some branches)
    try:
        from api.routers import wizard as wizard_router
        app.include_router(wizard_router.router, prefix="/api")
    except Exception:
        pass
    app.include_router(tasks_router)

